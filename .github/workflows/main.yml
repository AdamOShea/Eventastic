name: Safe Test and Deploy to DigitalOcean

on:
  push:
    branches:
      - dev  # Adjust if using a different branch

jobs:
  test:
    runs-on: ubuntu-latest

    steps:

    
    - name: Checkout Latest Code
      uses: actions/checkout@v3
      with:
        path: new_version/EireLive  # Checkout code in a separate directory

    - name: debug
      run: cd new_version && ls


    - name: Install Dependencies (Backend)
      run: |
        cd new_version/EireLive/app
        npm install
        cd ..
        cd backend
        npm install

    - name: Test Database Connection
      run: |
        PGPASSWORD=${{ secrets.DB_PW }} psql -h ${{ secrets.DB_HOST }} -p ${{ secrets.DB_PORT }} -U ${{ secrets.DB_USERNAME }} -d ${{ secrets.DB_DATABASE }} -c "SELECT NOW();"


    - name: Run Jest Tests (Backend)
      run: |
        cd new_version/EireLive/backend
        npm test -- --detectOpenHandles --verbose --runInBand
      env:
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PW }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_DATABASE: ${{ secrets.DB_DATABASE }}
        TICKETMASTER_API_KEY: ${{ secrets.TICKETMASTER_API_KEY }}

    - name: Cleanup on Failure
      if: failure()
      run: |
        echo "Tests failed. Cleaning up new_version directory..."
        rm -rf new_version

  deploy:
    runs-on: ubuntu-latest
    needs: test  # Ensures deployment runs ONLY if tests pass

    steps:
    - name: Checkout Latest Code
      uses: actions/checkout@v3
      

    - name: Deploy via SSH (Password Authentication)
      uses: appleboy/ssh-action@v0.1.4
      with:
        host: ${{ secrets.DROPLET_IP }}
        username: ${{ secrets.DROPLET_USER }}
        password: ${{ secrets.DROPLET_PW }}
        command_timeout: 600s
        script: |
          # Define directories
          BASE_DIR="/home/${{ secrets.DROPLET_USER }}/EireLive"
          NEW_VERSION_DIR="$BASE_DIR/new_version"
          LIVE_DIR="$BASE_DIR/EireLive/backend"

          # Move to deployment directory
          cd $BASE_DIR

          # Remove old test deployments (if any)
          rm -rf $NEW_VERSION_DIR

          # Clone the latest version into the test directory
          git clone --branch dev https://github.com/YOUR_GITHUB_REPO.git $NEW_VERSION_DIR
          
          # Move into the backend directory
          cd $NEW_VERSION_DIR/backend

          # Create .env file with GitHub Secrets
          echo "TICKETMASTER_API_KEY=${{ secrets.TICKETMASTER_API_KEY }}" >> .env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_PW=${{ secrets.DB_PW }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env

          # Pull latest code (again, just in case)
          git pull origin dev

          # Stop the currently running backend service
          docker-compose -f $LIVE_DIR/docker-compose.yml down

          # Move new version to the live directory
          rm -rf $LIVE_DIR
          mv $NEW_VERSION_DIR/backend $LIVE_DIR

          # Start the new backend service
          cd $LIVE_DIR
          docker-compose up -d --build

          # Clean up the temporary directory
          rm -rf $NEW_VERSION_DIR

          # Show logs to verify deployment
          docker-compose logs -f backend
